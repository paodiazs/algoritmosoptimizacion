# -*- coding: utf-8 -*-
"""el_problema_de_la_mochila.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kVVjLHyRHZ4XE6fdF6ghbnTWwqRu9Ylm
"""

!pip install ortools #Importa las bibliotecas

from ortools.algorithms.python import knapsack_solver #importar las bibliotecas


def main():
    # Declarar el solucionador
    solver = knapsack_solver.KnapsackSolver(
        knapsack_solver.SolverType.KNAPSACK_MULTIDIMENSION_BRANCH_AND_BOUND_SOLVER,
        "KnapsackExample", #La opción KNAPSACK_MULTIDIMENSION_BRANCH_AND_BOUND_SOLVER le indica al solucionador que use el algoritmo de rama y vínculo para resolver el problema.
    )
    #crear los datos
    """
    weights: Un vector que contiene los pesos de los elementos.
    values: Un vector que contiene los valores de los elementos.
    capacities: Un vector con una sola entrada, la capacidad de la mochila.
    """

    values = [
        # fmt:off
      360, 83, 59, 130, 431, 67, 230, 52, 93, 125, 670, 892, 600, 38, 48, 147,
      78, 256, 63, 17, 120, 164, 432, 35, 92, 110, 22, 42, 50, 323, 514, 28,
      87, 73, 78, 15, 26, 78, 210, 36, 85, 189, 274, 43, 33, 10, 19, 389, 276,
      312
        # fmt:on
    ]
    weights = [
        # fmt: off
      [7, 0, 30, 22, 80, 94, 11, 81, 70, 64, 59, 18, 0, 36, 3, 8, 15, 42, 9, 0,
       42, 47, 52, 32, 26, 48, 55, 6, 29, 84, 2, 4, 18, 56, 7, 29, 93, 44, 71,
       3, 86, 66, 31, 65, 0, 79, 20, 65, 52, 13],
        # fmt: on
    ]
    capacities = [850]

    #Llamar al agente de resolución

    solver.init(values, weights, capacities)
    computed_value = solver.solve()

    packed_items = []
    packed_weights = []
    total_weight = 0
    print("Total value =", computed_value)
    for i in range(len(values)):
        if solver.best_solution_contains(i):
            packed_items.append(i)
            packed_weights.append(weights[0][i])
            total_weight += weights[0][i]
    print("Total weight:", total_weight)
    print("Packed items:", packed_items)
    print("Packed_weights:", packed_weights)

    """
    El programa primero inicializa el agente de resolución y,
    luego, lo llama mediante computed_value = solver.Solve().
    El valor total de la solución óptima es computed_value, que es la misma que el peso total en este caso
    """


if __name__ == "__main__":
    main()